import os
import time
import shutil
from selenium import webdriver
from datetime import datetime, timedelta
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager


# üîπ Let√∂lt√©s figyel√©se
def wait_for_download(download_path, timeout=60):
    end_time = time.time() + timeout
    while time.time() < end_time:
        files = os.listdir(download_path)
        if any(file.endswith(".xls") or file.endswith(".xlsx") for file in files):
            print("F√°jl let√∂ltve!")
            return True
        time.sleep(2)
    print("Id≈ët√∫ll√©p√©s: A f√°jl nem t√∂lt≈ëd√∂tt le id≈ëben.")
    return False

def move_latest_file(source, target):
    files = [os.path.join(source, f) for f in os.listdir(source) if f.endswith((".xls", ".xlsx"))]
    if files:
        latest_file = max(files, key=os.path.getctime)  # Legut√≥bb let√∂lt√∂tt f√°jl
        shutil.move(latest_file, os.path.join(target, os.path.basename(latest_file)))
        print(f"F√°jl √°thelyezve: {latest_file} ‚Üí {target}")

def downloadFleetData():
   # user_name = os.environ.get("USERNAME") or os.getlogin()
    #print(user_name)

    target_folder = r"\\hucbrfs\Coolbridge\COMMON\ERP\BUSINESS_INTELLIGENCE\source_raw\fleet_management"
    download_path = "C:\\Users\\npap\\Downloads"

    #chrome_profile_path = f"C:\\Users\\{user_name}\\AppData\\Local\\Google\\Chrome\\User Data"

    options = webdriver.ChromeOptions()
    # options.add_argument("--headless=new")  # √öjabb headless m√≥d
    #options.add_argument(f"user-data-dir={chrome_profile_path}")
    options.add_argument("profile-directory=Default")  # Ha m√°s profiln√©v, cser√©ld ki!
    options.add_argument("--allow-running-insecure-content")  # Allow insecure content
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)
    options.add_argument("--unsafely-treat-insecure-origin-as-secure=http://tata.fleetmanager.guentner.local/")  # site's domain
    options.add_experimental_option("prefs", {
    "download.default_directory": download_path.replace("\\", "/"),
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True,  # Kapcsold be a biztons√°gos b√∂ng√©sz√©st
    "safebrowsing.disable_download_protection": True  # Tiltsd le a let√∂lt√©sv√©delmet
    })


    # WebDriver elind√≠t√°sa
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    time.sleep(5)
    driver.refresh()
    time.sleep(2)
    driver.get("http://tata.fleetmanager.guentner.local/")
    time.sleep(2)
    print("Aktu√°lis oldal c√≠me:", driver.title)


    #------------


    #------------


    time.sleep(5)
    driver.refresh()
    time.sleep(2)

    # Reports 
    try:
        reports_menu = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//span[text()='Reports']/ancestor::a")))
        reports_menu.click()
    except:
        print("Selenium nem tud kattintani, pr√≥b√°lkoz√°s JavaScript-tel...")
        reports_menu = driver.find_element(By.XPATH, "//span[text()='Reports']/ancestor::a")
        driver.execute_script("arguments[0].click();", reports_menu)

    time.sleep(2)

    reports_sub_menu = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[text()='Reports'])[2]/parent::a")))
    reports_sub_menu.click()

    time.sleep(2)

    fuel_supplier_summary = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@id='divFuelSupplierSummary']")))
    fuel_supplier_summary.click()

    time.sleep(3)

    collapse_button = wait.until(EC.element_to_be_clickable((By.ID, "ReportsIndexSearch_Collapse")))

    collapse_icon = driver.find_element(By.CSS_SELECTOR, "#ReportsIndexSearch_Collapse i")
    #collapse_button.click()
   # Lek√©rdezz√ºk a class attrib√∫tum√°t
    icon_class = collapse_icon.get_attribute("class")

    # Ellen≈ërizz√ºk, hogy fa-plus vagy fa-minus van benne
    if "fa-plus" in icon_class:
        print("A keres√©si panel NINCS LENYITVA.")
        collapse_icon.click()  # Ha nincs lenyitva, kattintunk r√°
    elif "fa-minus" in icon_class:
        print("A keres√©si panel LE VAN LENYITVA.")
       

    time.sleep(4)

    #Jelenlegi d√°tum
    today = datetime.today()
    day_today = today.strftime("%d")  # Nap (DD)
    month_today = today.strftime("%m")  # H√≥nap (MM)
    year_today = today.strftime("%Y")  # √âv (YYYY)

    print(f"Current date: {day_today}.{month_today}.{year_today}")

    # 3 h√≥nappal ezel≈ëtti d√°tum kisz√°m√≠t√°sa
    three_months_ago = datetime.today() - timedelta(days=90)
    day_3M = three_months_ago.strftime("%d")  # Nap (DD)
    month_3M = three_months_ago.strftime("%m")  # H√≥nap (MM)
    year_3M = three_months_ago.strftime("%Y")  # √âv (YYYY)

    print(f"Date of 3 months ago: {day_3M}.{month_3M}.{year_3M}")

    # Start Date mez≈ë (l√°that√≥ input mez≈ë)
    start_date_input = wait.until(EC.element_to_be_clickable((By.ID, "startDateWrapp")))
    start_date_input.click()  # Kattint√°s a mez≈ëbe
    time.sleep(2)

   # Shift+Tab k√©t alkalommal t√∂rt√©n≈ë haszn√°lata, hogy visszal√©pj
    actions = ActionChains(driver)
    actions.key_down(Keys.SHIFT)  # Nyomd le a Shift billenty≈±t
    actions.send_keys(Keys.TAB)  # El≈ësz√∂r Shift+Tab
    actions.send_keys(Keys.TAB)  # M√°sodszor Shift+Tab
    actions.key_up(Keys.SHIFT)  # Engedd fel a Shift billenty≈±t
    actions.perform()
    time.sleep(2)
    

    # Nap be√≠r√°sa
    start_date_input.send_keys(Keys.BACKSPACE * 2)  # T√∂r√∂lj√ºk az el≈ëz≈ë √©rt√©ket
    start_date_input.send_keys(day_3M)  
    start_date_input.send_keys(Keys.TAB)  # Tabul√°tor a h√≥naphoz
    time.sleep(2)

    # H√≥nap be√≠r√°sa
    start_date_input.send_keys(Keys.BACKSPACE * 2)  
    start_date_input.send_keys(month_3M)  
    start_date_input.send_keys(Keys.TAB)  # Tabul√°tor az √©vhez
    time.sleep(2)

    # √âv be√≠r√°sa
    start_date_input.send_keys(Keys.BACKSPACE * 4)  
    start_date_input.send_keys(year_3M)  
    start_date_input.send_keys(Keys.ENTER)  # Enter a v√°ltoz√°sok ment√©s√©hez
    time.sleep(2)


    #End Date mez≈ë - endDateWrapp
    end_date_input = wait.until(EC.element_to_be_clickable((By.ID, "endDateWrapp")))
    end_date_input.click()  # Kattint√°s a mez≈ëbe
    time.sleep(2)

   # Shift+Tab k√©t alkalommal t√∂rt√©n≈ë haszn√°lata, hogy visszal√©pj
    actions = ActionChains(driver)
    actions.key_down(Keys.SHIFT)  # Nyomd le a Shift billenty≈±t
    actions.send_keys(Keys.TAB)  # El≈ësz√∂r Shift+Tab
    actions.send_keys(Keys.TAB)  # M√°sodszor Shift+Tab
    actions.key_up(Keys.SHIFT)  # Engedd fel a Shift billenty≈±t
    actions.perform()
    time.sleep(2)


    # Nap be√≠r√°sa
    end_date_input.send_keys(Keys.BACKSPACE * 2)  # T√∂r√∂lj√ºk az el≈ëz≈ë √©rt√©ket
    end_date_input.send_keys(day_today)  
    end_date_input.send_keys(Keys.TAB)  # Tabul√°tor a h√≥naphoz
    time.sleep(2)

    # H√≥nap be√≠r√°sa
    end_date_input.send_keys(Keys.BACKSPACE * 2)  
    end_date_input.send_keys(month_today)  
    end_date_input.send_keys(Keys.TAB)  # Tabul√°tor az √©vhez
    time.sleep(2)

    # √âv be√≠r√°sa
    end_date_input.send_keys(Keys.BACKSPACE * 4)  
    end_date_input.send_keys(year_today)  
    end_date_input.send_keys(Keys.ENTER)  # Enter a v√°ltoz√°sok ment√©s√©hez
    time.sleep(3)
    
    search_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@class='box-footer']//button[contains(text(), 'Search')]")))
    search_button.click()
    time.sleep(2)

    # T√°bl√°zat, sorok
    table_Suppliers = driver.find_element(By.ID, "CostPerSupplierTable_wrapper")
    rows = table_Suppliers.find_elements(By.TAG_NAME, "tr")

    # V√©gigmegy√ºnk a sorokon √©s megkeress√ºk a megfelel≈ët
    for row in rows:
        if "Guentner internal Gas supplier" in row.text:
            # Ha megtal√°ltuk a megfelel≈ë sort, keress√ºk meg benne a Details gombot
            button = row.find_element(By.TAG_NAME, "button")
            button.click()
            break  # Ha megtal√°ltuk √©s r√°kattintottunk, kil√©p√ºnk a ciklusb√≥l
    time.sleep(5)

    #table_SpecificSupplier = driver.find_element(By.ID, "divCostPerSupplier")
    #--
    # Megkeress√ºk az √∂sszes box-header div-et
    box_headers = driver.find_elements(By.CLASS_NAME, "box-header")

    # V√©gigmegy√ºnk rajtuk, hogy megtal√°ljuk a megfelel≈ët
    for box in box_headers:
        if "Guentner internal Gas supplier" in box.text:
            # Megkeress√ºk benne az "Export Excel" gombot
            export_button = box.find_element(By.XPATH, ".//button[contains(text(), 'Export Excel')]")
            export_button.click()
            break  # Ha megtal√°ltuk √©s kattintottunk, kil√©p√ºnk a ciklusb√≥l

    time.sleep(15)

    wait_for_download(download_path)
    move_latest_file(download_path, target_folder)

    return driver
if __name__ == "__main__":
    driver = None
    try:
        driver = downloadFleetData()
      
    except Exception as e:
        print(f"Hiba t√∂rt√©nt: {e}")
        input("Nyomj Entert a kil√©p√©shez...")
    finally:
        if driver:
            driver.quit()
